edit:
;Inputs:
;   need edit_bottom,edit_top,edit_end,edit_ptr,
;   key_to_tok
;   edit_hook
;   get_tok_size

;Set up the keyflags
  ld a,1<<insertmode
  ld (flags+keyflags),a

rerender_edit:
  call getKeyDebounce
  set rerender,(iy+editorflags)
edit_loop:
  bit rerender,(iy+editorflags)
  call nz,rerender_editor

;Check if [ON] is being pressed
  in a,(4)
  and 8
  ret z

;blink the cursor
  ld hl,curcount
  dec (hl)
  jr nz,+_
  ld (hl),CUR_COUNT_RESET
  ld a,(flags+keyflags)
  xor 1<<cursorblink
  ld (flags+keyflags),a
  and 1<<cursorblink
  call curblink
  call UpdateLCD
_:


  call getKeyDebounce
  or a
  jr z,edit_loop
  call process_keypress
  jr c,edit_loop
;HL is a pointer to a size-prefixed tok string
  ex de,hl
  ld hl,(edit_ptr)
  call edit_hook      ;input and output: HL cur tok, DE new size-prefixed tokstr
  call replacetokens
  ret c               ;there was an error
  jr rerender_edit

curblink:
;z set if blinking off
;nz if blinking on
  ld a,(char_save)
  jr nz,curblinkon
;need to redraw the char
  ld hl,(textrow)
  push hl
  ld hl,(cursorrow)
  ld (textrow),hl
  call VPutC
  pop hl
  ld (textrow),hl
  ret

curblinkon:
  call chardim    ;returns D is width, E is height
  ld bc,(cursorrow)
  bit insertmode,(iy+keyflags)
  jr z,+_
  ld d,1
_:
  jp xorRect

chardim:
  ld de,$0406
  ret

replacetokens:
;HL points to the current tokens
;DE points to the new tokens
;BC is the number of tokens to replace
;returns carry if there was an error
  push de
  push hl
  push de
  call getsizetokstr
  pop hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  ex de,hl
;DE is pointer to new string
;HL is the new size
;BC is the old size
  or a
  sbc hl,bc

  ld b,h
  ld c,l
  pop hl
  call nz,insertmem
  pop de
  ret c     ;maybe want to throw an error?
;HL points to where to write
;DE points to the size-prefixed string to write
  ex de,hl
  ld c,(hl)
  inc hl
  ld b,(hl)
  inc hl
  ld a,b
  or c
  ret z
  ldir
  ;DE is the new edit_ptr ?
  ld (edit_ptr),de
  ret

rerender_editor:
;reset the rerender flag
  res rerender,(iy+editorflags)

;clear the graphics buffer
  call clrgbuf

;reset the text coordinates
  ld hl,0
  ld (textrow),hl

;draw the file, but look for the cursor location!
  ld hl,(edit_bottom)
  ld bc,(edit_ptr)
  call VPutTokStr_findcursor

;Get a copy of the char that the cursor is over
  ld hl,(edit_ptr)
  ld de,(edit_end)
  or a
  sbc hl,de
  add hl,de
  ld a,' '
  jr nc,+_
get_tok_first_char:
  call get_tok_str
  ld a,(de)
  cp 6
  jr nc,+_
  ex de,hl
  cp 3
  ld a,' '
  jr c,+_
  ld a,(hl)
  cp 5
  inc hl
  jr z,get_tok_first_char
  ld e,(hl)
  inc hl
  ld d,(hl)
  cp 4
  jr nz,$+5
  inc hl
  add hl,de
  .db $FE
  ex de,hl
  ld a,(hl)
_:
  ld (char_save),a

;Update the LCD
  di
  jp UpdateLCD

VPutTokStr_findcursor:
;BC is the byte the cursor is at
  ld de,-1
  ld (cursorrow),de
  call VPutTokStr_findcursor_loop

;make sure cursorrow is not still (-1,-1)
  ld hl,(cursorrow)
  ld a,h
  and l
  inc a
  ret nz

;cursorrow is still (-1,-1), so the cursor was never found
;this should mean a bad bug is here, but let's just set the cursor to the end of
;the file
  ld hl,(edit_end)
  ld (edit_ptr),hl
  ld hl,(textrow)
  ld (cursorrow),hl
  ret

VPutTokStr_findcursor_loop:
;Make sure that we aren't at the end of the file data
  ld de,(edit_end)
  or a
  sbc hl,de
  add hl,de
  ret nc

;Check if HL is at BC yet
  xor a
  sbc hl,bc
  add hl,bc
  jr c,+_
  ;this means HL is at or past BC
  ;If we are now past BC, we need to verify that we aren't partway through a
  ;token (in case of retokenizing), and continue on with the faster version of
  ;tis routine.
  ld de,(textrow)
  ld (cursorrow),de
  jr z,VPutTokStr_cursor_found
  ;so we are split through a token. That's okay, we'll just load HL as the new
  ;edit_ptr :)
  ld (edit_ptr),hl
  jr VPutTokStr_cursor_found

_:

  push bc
  call get_tok_str
  pop bc
  ret z
  push bc
  push hl
  ex de,hl
  call VPutS
  pop hl
  pop bc
  ld a,(textrow)
  cp 64
  jr c,VPutTokStr_findcursor_loop
  ret

VPutTokStr:
  ld de,(edit_end)
  or a
  sbc hl,de
  add hl,de
  ret nc

VPutTokStr_cursor_found:
  call get_tok_str
  ret z
  push hl
  ex de,hl
  call VPutS
  pop hl
  ld a,(textrow)
  cp 64
  jr c,VPutTokStr
  ret

get_tok_str:
;return HL points to the next token
;       DE points to the token string
;       z flag set if end-of-string token
  ld a,(hl)
  or a
  ret z
  cp $3F
  jr z,+_
  call isAxeTok
  jr z,get_tok_str_no_EOS
  bcall(_IsA2ByteTok)
  push af
  push hl
  bcall(_Get_Tok_Strng)
  ld de,OP3
  pop hl
  pop af
  inc hl
  ret nz
  inc hl
get_tok_str_no_EOS:
  or 1
  ret
_:
  sub $3E   ;char 0x01 is used as a control char to jump down a line
  inc hl
  ld de,+_
  ret
_:
  .db 1,0

isAxeTok:
  cp 'W'
  jr z,checkWhite
  cp 'I'
  jr z,checkInvert
isRectTok:
  cp $BB
  ret nz
  inc hl
  ld a,(hl)
  cp $2D    ;ref(
  jr nz,isAxeTok_decExit
  inc hl
  ld de,s_Rect
  ret
isAxeTok_decExit:
  dec hl
  ret

checkWhite:
  inc hl
  ld a,(hl)
  cp $9C
  jr nz,+_
  inc hl
  ld de,s_WhiteLine
  ret
_:
  call isRectTok
  jr nz,isAxeTok_decExit
  ld de,s_WhiteRect
  ret

checkInvert:
  inc hl
  ld a,(hl)
  cp $9C
  jr nz,+_
  inc hl
  ld de,s_InvertLine
  ret
_:
  call isRectTok
  jr nz,isAxeTok_decExit
  ld de,s_InvertRect
  ret

s_InvertRect:
  .db 3 \ .dw s_Invert
  .db 3 \ .dw s_Rect
  .db 0
s_WhiteRect:
  .db 3 \ .dw s_White
s_Rect:
  .db "Rect(",0

s_InvertLine:
  .db 3 \ .dw s_Invert
  .db 3 \ .dw s_Line
  .db 0
s_WhiteLine:
  .db 3 \ .dw s_White
s_Line:
  .db "Line(",0

s_White:
  .db "White",0
s_Invert:
  .db "Invert",0


edit_hook:
;If the token being typed is a '(', then check if we want to retroactively write
;a function token
  ;note that DE points to the string in question
  push hl
  push de
  push bc
  ld a,(de)
  dec a
  jr nz,edit_hook_end
  inc de
  ld a,(de)
  or a
  jr nz,edit_hook_end
  inc de
  ld a,(de)
  cp $10    ;open parens
  jr nz,edit_hook_end
  ;now HL points to the current token, but let's look at the preceding tokens
  ld bc,-4
  add hl,bc
  ld de,str_Line
  call cpstr
  or a
  jr nz,edit_hook_end
  dec c
  add hl,bc
  ;HL points to where to overwrite the tokens
  pop bc

  pop de
  pop de
  ld de,tokstr_Line
  inc bc
  inc bc
  inc bc
  inc bc
  ret


edit_hook_end:
  pop bc
  pop de
  pop hl
  ret

tokstr_Line:
  .dw 1
  .db $9C,0
str_Line:
  .db "LINE",0


delcurtok:
  push af
  set rerender,(iy+editorflags)
  ld hl,(edit_ptr)
  call get_tok_size
  ld hl,(edit_ptr)
  call delmem
  pop af
  ret

get_tok_size:
;HL points to the token
;return HL pointing to the next token and BC as the size
;First, verify that there are even bytes left!
  ld de,(edit_end)
  ld bc,0
  or a
  sbc hl,de
  add hl,de
  ret nc
  ;if HL>=DE, should exit with BC=0


;here is the custom stuff
_IsA2ByteTok  = 42A3h
  ld a,(hl)
  inc hl
  inc c
  cp 'W'
  jr nc,+_
  cp 'I'
  jr nc,+_

  bcall(_IsA2ByteTok)
  ret nz
get_tok_size_inc:
  inc hl
  inc c
  ret
get_tok_size_dec:
  dec hl
  ret
_:
  ld a,(hl)
  cp $9C      ;Line
  jr z,get_tok_size_inc
  cp $BB
  ret nz
  inc hl
  ld a,(hl)
  cp $2D      ;ref(
  jr nz,get_tok_size_dec
  inc c
  inc c
  inc hl
  ret

process_keypress:
key_to_tok:
;return carry if no token returned
;return HL as a pointer to the null-terminated token string
;       BC as the number of tokens to overwrite,
  cp 31   ;prgm token
  jr nz,key_to_tok_convert
  bit shift,(iy+keyflags)
  res shift,(iy+keyflags)
  ld ix,menu_prgm
  ld hl,menu_prgm_header
  jr z,+_
  ld hl,menu_draw_header
  ld ix,menu_draw
_:
  ld bc,$1008
  ld de,$4030
  call menu
  set rerender,(iy+editorflags)
  bit insertmode,(iy+keyflags)
  jr z,+_
  ld c,b
_:

  ccf
  ret

key_to_tok_convert:
  call getKeyTok
  ret c
;else, the key was a token
  ;DE is the token, D is 0 if a 1-byte token

;These will only replace 1 token, so set BC to 1
  ld bc,1

;write the token to a spot in RAM
  xor a
  ld hl,OP1+4
  ld (hl),a
  dec hl
  inc a
  ld (hl),e
  dec hl
  inc d
  dec d
  jr z,+_
  ld (hl),d
  inc a
  dec hl
_:

;Now write the size bytes of the token string (# of bytes, not tokens)
  ld (hl),b
  dec hl
  ld (hl),a

;If the token is a newline, we'll actually insert, even in overwrite mode
  inc d
  dec d
  jr nz,+_
  ld a,e
  cp $3F
  jr z,key_to_tok_replace0
_:

;If insert mode, we'll actually replace 0 bytes
  bit insertmode,(iy+keyflags)
  jr z,+_
key_to_tok_replace0:
  ld c,b
_:

  or a
  ret
