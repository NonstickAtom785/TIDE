VPutS_loc:
  ld (textRow),bc
  jr VPutS

_:
  inc hl
  call VPutC
VPutS:
;Inputs:
;   HL points to a zero terminated string to display
;Outputs:
;   string is displayed
;   HL points to the ending byte
;   A is 0
;   z flag is set
;   c flag reset
;Destroys:
;     DE,BC
  ld a,(hl)
  or a
  jr nz,-_
  ret

VPutC_newline:
  ld (textcol),a
  ld a,(textrow)
  cp 64
  ret nc
  add a,6
  ld (textrow),a
  ret

VPutC_tab:
  ld a,(textcol)
  add a,16
  and %11110000
  ld (textcol),a
  ret

VPutC_str:
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  push hl
  ex de,hl
  jr +_
VPutC_strrel:
  ld c,(hl)
  inc hl
  ld b,(hl)
  inc hl
  push hl
  add hl,bc
_:
  call VPutS
  pop hl
  ret

VPutC_token:
  ret

VPutC:
;Inputs:
;    A is the char to draw
;     (textRow) is the pixel row to draw at
;     (textCol) is the text column to draw at (0 to 23)

;Control Characters
;   0x00
;   0x01  newline
;   0x02  tab
;   0x03  str, followed by 2-byte ptr
;   0x04  str_rel, followed by 2-byte offset
;   0x05  token



  dec a
  jr z,VPutC_newline
  dec a
  jr z,VPutC_tab
  dec a
  jr z,VPutC_str
  dec a
  jr z,VPutC_strrel
  dec a
  jr z,VPutC_token
  push hl
  call +_
  pop hl
  ret
_:
  ld hl,font_small+(3*5)
  ld c,a
  ld b,0
  add hl,bc
  add hl,bc
  add hl,bc

  ld de,OP1
  ld bc,$03F0  ;3*2 Nibbles
  ex de,hl
_:
  ld a,(de)
  cpl
  and c
  ld (hl),a
  inc l
  ld (hl),c
  inc l

  ld a,(de)
  cpl
  rrca \ rrca
  rrca \ rrca
  and c
  ld (hl),a
  inc l
  ld (hl),c
  inc l
  inc de
  djnz -_

  ld hl,(textrow)
  ld a,h
  cp 96
  ret nc
  add a,4
  ld (textcol),a
  sub 4

  ld b,6
  ld ix,OP1

;Masked Sprite routine
putsprite_masked:
;Inputs:
;   (A,L) = (x,y)
;   B is height
;   IX points to the sprite data
;       first byte is the data
;       second byte is mask
;       continues, alternating like this.
;
;Outputs:
;   Mask is ORed to the buffer, then data is XORed on top of that.
;
;Destroys:
;   AF, BC, DE, HL, IX
;
;Notes:
;   To set a pixel...
;     black: mask is 1, data is 0
;     white: mask is 1, data is 1
;     clear: mask is 0, data is 0 (keeps the data from the buffer)
;     invert: mask is 0, data is 1 (inverts the data from the buffer)
;
;This routine is free to use :)
;63 bytes (or 64 bytes if gbuf is not located at 0x**40

  ld e,l
  ld h,0
  ld d,h
  add hl,hl
  add hl,de
  add hl,hl
  add hl,hl
  ld e,a
  and 7
  ld c,a
  xor e  ;essentially gets E with the bottom 3 bits reset
#if (plotSScreen&255) = 64
  inc a
  rra
  rra
  rra
  ld e,a
  ld d,plotSScreen>>8
#else
  rra
  rra
  rra
  ld e,a
  add hl,de
  ld de,plotSScreen
#endif
  add hl,de

putsprite_masked_loop:
  push bc
  xor a
  ld d,(ix)
  ld e,a
  or c
  ld b,c
  ld c,e
  inc ix
  ld a,(ix)
  jr z,putsprite_masked_rotdone
putsprite_masked_rot:
  rra
  rr c
  srl d
  rr e
  djnz putsprite_masked_rot
putsprite_masked_rotdone:
  or (hl)
  xor d
  ld (hl),a
  inc hl
  ld a,(hl)
  or c
  xor e
  ld (hl),a
  ld c,11
  add hl,bc
  inc ix
  pop bc
  djnz putsprite_masked_loop
  ret
